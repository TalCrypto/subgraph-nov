// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AssetDeposit extends ethereum.Event {
  get params(): AssetDeposit__Params {
    return new AssetDeposit__Params(this);
  }
}

export class AssetDeposit__Params {
  _event: AssetDeposit;

  constructor(event: AssetDeposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get novethMintAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralId(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ETHDeposit extends ethereum.Event {
  get params(): ETHDeposit__Params {
    return new ETHDeposit__Params(this);
  }
}

export class ETHDeposit__Params {
  _event: ETHDeposit;

  constructor(event: ETHDeposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get novethMintAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get referralId(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ETHSwappedForLST extends ethereum.Event {
  get params(): ETHSwappedForLST__Params {
    return new ETHSwappedForLST__Params(this);
  }
}

export class ETHSwappedForLST__Params {
  _event: ETHSwappedForLST;

  constructor(event: ETHSwappedForLST) {
    this._event = event;
  }

  get ethAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get returnAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MaxNodeDelegatorLimitUpdated extends ethereum.Event {
  get params(): MaxNodeDelegatorLimitUpdated__Params {
    return new MaxNodeDelegatorLimitUpdated__Params(this);
  }
}

export class MaxNodeDelegatorLimitUpdated__Params {
  _event: MaxNodeDelegatorLimitUpdated;

  constructor(event: MaxNodeDelegatorLimitUpdated) {
    this._event = event;
  }

  get maxNodeDelegatorLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinAmountToDepositUpdated extends ethereum.Event {
  get params(): MinAmountToDepositUpdated__Params {
    return new MinAmountToDepositUpdated__Params(this);
  }
}

export class MinAmountToDepositUpdated__Params {
  _event: MinAmountToDepositUpdated;

  constructor(event: MinAmountToDepositUpdated) {
    this._event = event;
  }

  get minAmountToDeposit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NodeDelegatorAddedinQueue extends ethereum.Event {
  get params(): NodeDelegatorAddedinQueue__Params {
    return new NodeDelegatorAddedinQueue__Params(this);
  }
}

export class NodeDelegatorAddedinQueue__Params {
  _event: NodeDelegatorAddedinQueue;

  constructor(event: NodeDelegatorAddedinQueue) {
    this._event = event;
  }

  get nodeDelegatorContracts(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class NodeDelegatorRemovedFromQueue extends ethereum.Event {
  get params(): NodeDelegatorRemovedFromQueue__Params {
    return new NodeDelegatorRemovedFromQueue__Params(this);
  }
}

export class NodeDelegatorRemovedFromQueue__Params {
  _event: NodeDelegatorRemovedFromQueue;

  constructor(event: NodeDelegatorRemovedFromQueue) {
    this._event = event;
  }

  get nodeDelegatorContracts(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedLRTConfig extends ethereum.Event {
  get params(): UpdatedLRTConfig__Params {
    return new UpdatedLRTConfig__Params(this);
  }
}

export class UpdatedLRTConfig__Params {
  _event: UpdatedLRTConfig;

  constructor(event: UpdatedLRTConfig) {
    this._event = event;
  }

  get lrtConfig(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DepositPool__getAssetDistributionDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAssetLyingInDepositPool(): BigInt {
    return this.value0;
  }

  getAssetLyingInNDCs(): BigInt {
    return this.value1;
  }

  getAssetStakedInEigenLayer(): BigInt {
    return this.value2;
  }
}

export class DepositPool__getETHDistributionDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getEthLyingInDepositPool(): BigInt {
    return this.value0;
  }

  getEthLyingInNDCs(): BigInt {
    return this.value1;
  }

  getEthStakedInEigenLayer(): BigInt {
    return this.value2;
  }
}

export class DepositPool extends ethereum.SmartContract {
  static bind(address: Address): DepositPool {
    return new DepositPool("DepositPool", address);
  }

  getAssetCurrentLimit(asset: Address): BigInt {
    let result = super.call(
      "getAssetCurrentLimit",
      "getAssetCurrentLimit(address):(uint256)",
      [ethereum.Value.fromAddress(asset)],
    );

    return result[0].toBigInt();
  }

  try_getAssetCurrentLimit(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetCurrentLimit",
      "getAssetCurrentLimit(address):(uint256)",
      [ethereum.Value.fromAddress(asset)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetDistributionData(
    asset: Address,
  ): DepositPool__getAssetDistributionDataResult {
    let result = super.call(
      "getAssetDistributionData",
      "getAssetDistributionData(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(asset)],
    );

    return new DepositPool__getAssetDistributionDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getAssetDistributionData(
    asset: Address,
  ): ethereum.CallResult<DepositPool__getAssetDistributionDataResult> {
    let result = super.tryCall(
      "getAssetDistributionData",
      "getAssetDistributionData(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(asset)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DepositPool__getAssetDistributionDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getETHDistributionData(): DepositPool__getETHDistributionDataResult {
    let result = super.call(
      "getETHDistributionData",
      "getETHDistributionData():(uint256,uint256,uint256)",
      [],
    );

    return new DepositPool__getETHDistributionDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getETHDistributionData(): ethereum.CallResult<DepositPool__getETHDistributionDataResult> {
    let result = super.tryCall(
      "getETHDistributionData",
      "getETHDistributionData():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DepositPool__getETHDistributionDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getNodeDelegatorQueue(): Array<Address> {
    let result = super.call(
      "getNodeDelegatorQueue",
      "getNodeDelegatorQueue():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getNodeDelegatorQueue(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getNodeDelegatorQueue",
      "getNodeDelegatorQueue():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getNovETHAmountToMint(asset: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getNovETHAmountToMint",
      "getNovETHAmountToMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_getNovETHAmountToMint(
    asset: Address,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNovETHAmountToMint",
      "getNovETHAmountToMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapETHToAssetReturnAmount(
    toAsset: Address,
    ethAmountToSend: BigInt,
  ): BigInt {
    let result = super.call(
      "getSwapETHToAssetReturnAmount",
      "getSwapETHToAssetReturnAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(toAsset),
        ethereum.Value.fromUnsignedBigInt(ethAmountToSend),
      ],
    );

    return result[0].toBigInt();
  }

  try_getSwapETHToAssetReturnAmount(
    toAsset: Address,
    ethAmountToSend: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapETHToAssetReturnAmount",
      "getSwapETHToAssetReturnAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(toAsset),
        ethereum.Value.fromUnsignedBigInt(ethAmountToSend),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalAssetDeposits(asset: Address): BigInt {
    let result = super.call(
      "getTotalAssetDeposits",
      "getTotalAssetDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(asset)],
    );

    return result[0].toBigInt();
  }

  try_getTotalAssetDeposits(asset: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAssetDeposits",
      "getTotalAssetDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(asset)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isNodeDelegator(param0: Address): BigInt {
    let result = super.call(
      "isNodeDelegator",
      "isNodeDelegator(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_isNodeDelegator(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "isNodeDelegator",
      "isNodeDelegator(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lrtConfig(): Address {
    let result = super.call("lrtConfig", "lrtConfig():(address)", []);

    return result[0].toAddress();
  }

  try_lrtConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall("lrtConfig", "lrtConfig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxNodeDelegatorLimit(): BigInt {
    let result = super.call(
      "maxNodeDelegatorLimit",
      "maxNodeDelegatorLimit():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxNodeDelegatorLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxNodeDelegatorLimit",
      "maxNodeDelegatorLimit():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minAmountToDeposit(): BigInt {
    let result = super.call(
      "minAmountToDeposit",
      "minAmountToDeposit():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minAmountToDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minAmountToDeposit",
      "minAmountToDeposit():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeDelegatorQueue(param0: BigInt): Address {
    let result = super.call(
      "nodeDelegatorQueue",
      "nodeDelegatorQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_nodeDelegatorQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nodeDelegatorQueue",
      "nodeDelegatorQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNodeDelegatorContractToQueueCall extends ethereum.Call {
  get inputs(): AddNodeDelegatorContractToQueueCall__Inputs {
    return new AddNodeDelegatorContractToQueueCall__Inputs(this);
  }

  get outputs(): AddNodeDelegatorContractToQueueCall__Outputs {
    return new AddNodeDelegatorContractToQueueCall__Outputs(this);
  }
}

export class AddNodeDelegatorContractToQueueCall__Inputs {
  _call: AddNodeDelegatorContractToQueueCall;

  constructor(call: AddNodeDelegatorContractToQueueCall) {
    this._call = call;
  }

  get nodeDelegatorContracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddNodeDelegatorContractToQueueCall__Outputs {
  _call: AddNodeDelegatorContractToQueueCall;

  constructor(call: AddNodeDelegatorContractToQueueCall) {
    this._call = call;
  }
}

export class DepositAssetCall extends ethereum.Call {
  get inputs(): DepositAssetCall__Inputs {
    return new DepositAssetCall__Inputs(this);
  }

  get outputs(): DepositAssetCall__Outputs {
    return new DepositAssetCall__Outputs(this);
  }
}

export class DepositAssetCall__Inputs {
  _call: DepositAssetCall;

  constructor(call: DepositAssetCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minNovETHAmountExpected(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referralId(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class DepositAssetCall__Outputs {
  _call: DepositAssetCall;

  constructor(call: DepositAssetCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }

  get minNovETHAmountExpected(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get referralId(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get lrtConfigAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveManyNodeDelegatorContractsFromQueueCall extends ethereum.Call {
  get inputs(): RemoveManyNodeDelegatorContractsFromQueueCall__Inputs {
    return new RemoveManyNodeDelegatorContractsFromQueueCall__Inputs(this);
  }

  get outputs(): RemoveManyNodeDelegatorContractsFromQueueCall__Outputs {
    return new RemoveManyNodeDelegatorContractsFromQueueCall__Outputs(this);
  }
}

export class RemoveManyNodeDelegatorContractsFromQueueCall__Inputs {
  _call: RemoveManyNodeDelegatorContractsFromQueueCall;

  constructor(call: RemoveManyNodeDelegatorContractsFromQueueCall) {
    this._call = call;
  }

  get nodeDelegatorContracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveManyNodeDelegatorContractsFromQueueCall__Outputs {
  _call: RemoveManyNodeDelegatorContractsFromQueueCall;

  constructor(call: RemoveManyNodeDelegatorContractsFromQueueCall) {
    this._call = call;
  }
}

export class RemoveNodeDelegatorContractFromQueueCall extends ethereum.Call {
  get inputs(): RemoveNodeDelegatorContractFromQueueCall__Inputs {
    return new RemoveNodeDelegatorContractFromQueueCall__Inputs(this);
  }

  get outputs(): RemoveNodeDelegatorContractFromQueueCall__Outputs {
    return new RemoveNodeDelegatorContractFromQueueCall__Outputs(this);
  }
}

export class RemoveNodeDelegatorContractFromQueueCall__Inputs {
  _call: RemoveNodeDelegatorContractFromQueueCall;

  constructor(call: RemoveNodeDelegatorContractFromQueueCall) {
    this._call = call;
  }

  get nodeDelegatorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveNodeDelegatorContractFromQueueCall__Outputs {
  _call: RemoveNodeDelegatorContractFromQueueCall;

  constructor(call: RemoveNodeDelegatorContractFromQueueCall) {
    this._call = call;
  }
}

export class SetMinAmountToDepositCall extends ethereum.Call {
  get inputs(): SetMinAmountToDepositCall__Inputs {
    return new SetMinAmountToDepositCall__Inputs(this);
  }

  get outputs(): SetMinAmountToDepositCall__Outputs {
    return new SetMinAmountToDepositCall__Outputs(this);
  }
}

export class SetMinAmountToDepositCall__Inputs {
  _call: SetMinAmountToDepositCall;

  constructor(call: SetMinAmountToDepositCall) {
    this._call = call;
  }

  get minAmountToDeposit_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinAmountToDepositCall__Outputs {
  _call: SetMinAmountToDepositCall;

  constructor(call: SetMinAmountToDepositCall) {
    this._call = call;
  }
}

export class SwapETHForAssetWithinDepositPoolCall extends ethereum.Call {
  get inputs(): SwapETHForAssetWithinDepositPoolCall__Inputs {
    return new SwapETHForAssetWithinDepositPoolCall__Inputs(this);
  }

  get outputs(): SwapETHForAssetWithinDepositPoolCall__Outputs {
    return new SwapETHForAssetWithinDepositPoolCall__Outputs(this);
  }
}

export class SwapETHForAssetWithinDepositPoolCall__Inputs {
  _call: SwapETHForAssetWithinDepositPoolCall;

  constructor(call: SwapETHForAssetWithinDepositPoolCall) {
    this._call = call;
  }

  get toAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minToAssetAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SwapETHForAssetWithinDepositPoolCall__Outputs {
  _call: SwapETHForAssetWithinDepositPoolCall;

  constructor(call: SwapETHForAssetWithinDepositPoolCall) {
    this._call = call;
  }
}

export class TransferAssetToNodeDelegatorCall extends ethereum.Call {
  get inputs(): TransferAssetToNodeDelegatorCall__Inputs {
    return new TransferAssetToNodeDelegatorCall__Inputs(this);
  }

  get outputs(): TransferAssetToNodeDelegatorCall__Outputs {
    return new TransferAssetToNodeDelegatorCall__Outputs(this);
  }
}

export class TransferAssetToNodeDelegatorCall__Inputs {
  _call: TransferAssetToNodeDelegatorCall;

  constructor(call: TransferAssetToNodeDelegatorCall) {
    this._call = call;
  }

  get ndcIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferAssetToNodeDelegatorCall__Outputs {
  _call: TransferAssetToNodeDelegatorCall;

  constructor(call: TransferAssetToNodeDelegatorCall) {
    this._call = call;
  }
}

export class TransferETHToNodeDelegatorCall extends ethereum.Call {
  get inputs(): TransferETHToNodeDelegatorCall__Inputs {
    return new TransferETHToNodeDelegatorCall__Inputs(this);
  }

  get outputs(): TransferETHToNodeDelegatorCall__Outputs {
    return new TransferETHToNodeDelegatorCall__Outputs(this);
  }
}

export class TransferETHToNodeDelegatorCall__Inputs {
  _call: TransferETHToNodeDelegatorCall;

  constructor(call: TransferETHToNodeDelegatorCall) {
    this._call = call;
  }

  get ndcIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferETHToNodeDelegatorCall__Outputs {
  _call: TransferETHToNodeDelegatorCall;

  constructor(call: TransferETHToNodeDelegatorCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateLRTConfigCall extends ethereum.Call {
  get inputs(): UpdateLRTConfigCall__Inputs {
    return new UpdateLRTConfigCall__Inputs(this);
  }

  get outputs(): UpdateLRTConfigCall__Outputs {
    return new UpdateLRTConfigCall__Outputs(this);
  }
}

export class UpdateLRTConfigCall__Inputs {
  _call: UpdateLRTConfigCall;

  constructor(call: UpdateLRTConfigCall) {
    this._call = call;
  }

  get lrtConfigAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateLRTConfigCall__Outputs {
  _call: UpdateLRTConfigCall;

  constructor(call: UpdateLRTConfigCall) {
    this._call = call;
  }
}

export class UpdateMaxNodeDelegatorLimitCall extends ethereum.Call {
  get inputs(): UpdateMaxNodeDelegatorLimitCall__Inputs {
    return new UpdateMaxNodeDelegatorLimitCall__Inputs(this);
  }

  get outputs(): UpdateMaxNodeDelegatorLimitCall__Outputs {
    return new UpdateMaxNodeDelegatorLimitCall__Outputs(this);
  }
}

export class UpdateMaxNodeDelegatorLimitCall__Inputs {
  _call: UpdateMaxNodeDelegatorLimitCall;

  constructor(call: UpdateMaxNodeDelegatorLimitCall) {
    this._call = call;
  }

  get maxNodeDelegatorLimit_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxNodeDelegatorLimitCall__Outputs {
  _call: UpdateMaxNodeDelegatorLimitCall;

  constructor(call: UpdateMaxNodeDelegatorLimitCall) {
    this._call = call;
  }
}
